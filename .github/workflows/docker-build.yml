# 工作流的名称
name: Build and Push Docker Image

# 触发工作流的事件
on:
  push:
    branches: [ main ] # 当 main 分支有推送时
    paths:             # 且推送修改了以下文件时
      - 'Dockerfile'
      - 'app.js'
      - 'package.json'
  pull_request:
    branches: [ main ] # 当有 PR 合并到 main 分支时
  workflow_dispatch:   # 允许你手动触发此工作流

jobs:
  build:
    runs-on: ubuntu-latest # 在最新的 Ubuntu 虚拟机上运行

    # ----------------------------------------------------
    # 关键：授予 GITHUB_TOKEN 正确的权限
    # ----------------------------------------------------
    permissions:
      contents: read      # 授予 'checkout' 步骤拉取代码的权限
      packages: write     # 授予 'docker login' 和 'docker push' 写入 ghcr.io 的权限
    
    steps:
      # 步骤 1: 签出（下载）你的代码到虚拟机
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 登录到 GitHub Container Registry (ghcr.io)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # 使用 'github.repository_owner' 作为用户名（例如 'axllsls'）
          username: ${{ github.repository_owner }} 
          # 使用自动生成的 GITHUB_TOKEN 作为密码
          password: ${{ secrets.GITHUB_TOKEN }}

      # 步骤 3: 设置 Docker Buildx (一个高级的构建器)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤 4: 构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .  # 使用当前目录 ('.') 作为构建上下文
          push: true  # 确定执行 'docker push'
          tags: |     # 为镜像打上标签
            ghcr.io/${{ github.repository_owner }}/xhttp:latest
          labels: |   # 添加元数据标签
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=XHTTP Server
            org.opencontainers.image.licenses=MIT
          # 启用 GitHub Actions 的构建缓存，加快后续构建速度
          cache-from: type=gha
          cache-to: type=gha,mode=max
